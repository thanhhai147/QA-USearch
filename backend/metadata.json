{"docstore": [{"metadata": {"id": "Software System Document.pdf:1:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n1 \n \n \n \n \n \nH\u1ec6 \u0110I\u1ec0U H\u00c0NH \nB\u00c1O C\u00c1O LAB 4 \nH\u1ecd v\u00e0 t\u00ean: Phan Thanh H\u1ea3i \nM\u00e3 s\u1ed1 sinh vi\u00ean: 22520390 \nL\u1edbp: IT007.P11 \n", "id": "0"}, {"metadata": {"id": "Software System Document.pdf:2:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n2 \n \n \n1. Gi\u1ea3i thu\u1eadt Shortest-Job-First \n L\u01b0u \u0111\u1ed3 gi\u1ea3i thu\u1eadt: \n \n Ch\u1ea1y tay l\u01b0u \u0111\u1ed3 gi\u1ea3i thu\u1eadt: \n- \nInput \n \n \niArrival \niBurst \nP1 \n0 \n6 \nP2 \n2 \n7 \nP3 \n5 \n8 \nP4 \n9 \n3 \nP5 \n12 \n6 \n", "id": "1"}, {"metadata": {"id": "Software System Document.pdf:3:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n3 \n \n \n \n- quickSort(n, Input) \nInput: \n \n \n \n \n \n \n \n \n \n \n \n \n- while(iRemain > 0): \npushProcess(&iReady, ReadyQueue, Input[0]) \nremoveProcess(&iRemain, 0, Input) \n+ ReadyQueue: \n \niArrival \niBurst \nP1 \n0 \n6 \nP2 \n2 \n7 \nP3 \n5 \n8 \nP4 \n9 \n3 \nP5 \n12 \n6 \n+ Input: \n \niArrival \niBurst \n \n- Kh\u1edfi t\u1ea1o min, i, j, temp \nWhile(i<iReady)( T\u00ecm ti\u1ebfn tr\u00ecnh c\u00f3 burst th\u1ea5p nh\u1ea5t \u0111\u1ec3 th\u1ef1c hi\u1ec7n) \niArrival \niBurst \nP1 \n0 \n6 \nP2 \n2 \n7 \nP3 \n5 \n8 \nP4 \n9 \n3 \nP5 \n12 \n6 \n", "id": "2"}, {"metadata": {"id": "Software System Document.pdf:4:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n4 \n \n \n \n+ i=1: \nmin = 1000000 \nSau v\u00f2ng for ta \u0111\u01b0\u1ee3c min = 7, temp = 1 \nMin l\u00e0 P2 \nP2.iStart = 6 \nP2.iFinish = 13 \nP2.iWaiting = 4 \nP2.iResponse = 4 \nP2.iTaT = 11 \n+ i=2: \nmin = 1000000 \nSau v\u00f2ng for ta t\u00ecm \u0111\u01b0\u1ee3c min = 3, temp = 3 \nMin l\u00e0 p4 \nP4.iStart = 13 \nP4.iFinish = 16 \nP4.iWaiting = 4 \nP4.iResponse = 4 \nP4.iTaT = 7 \n+ i=3: \nmin = 1000000 \nSau v\u00f2ng for ta t\u00ecm \u0111\u01b0\u1ee3c min = 6, temp=4 \nMin l\u00e0 P5 \nP5.iStart = 16 \nP5.iFinish = 22 \nP5.iWaiting = 4 \nP5.iResponse = 4 \nP5.iTaT = 10 \n+ i=4: \nmin = 1000000 \nSau v\u00f2ng for ta t\u00ecm \u0111\u01b0\u1ee3c min = 8, temp= 2 \nMin l\u00e0 P3 \nP3.iStart = 22 \n", "id": "3"}, {"metadata": {"id": "Software System Document.pdf:5:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n5 \n \n \n#include <stdio.h> \n#include <stdlib.h> \n#define SORT_BY_ARRIVAL 0 \n \nP3.iFinish = 30 \nP3.iWaiting = 17 \nP3.iResponse = 17 \nP3.iTaT = 18 \n- while(iReady!=0) \npushProcess(&iTerminated, TerminatedArray, ReadyQueue[0]); \nremoveProcess(&iReady, 0, ReadyQueue); \nReadyQueue: \n \niArrival \niBurst \n \nTerminatedArray: \n \niArrival \niBurst \nP1 \n0 \n6 \nP2 \n2 \n7 \nP4 \n9 \n3 \nP5 \n12 \n6 \nP3 \n5 \n8 \n- Xu\u1ea5t Gant Chart, AWT, ATaT: \n+ Gant Chart \n \nP1 \nP2 \nP4 \nP5 \nP3 \n0 \n6 \n13 \n16 \n22 \n30 \n+ AWT = 5.8 \n+ ATaT = 11.8 \n Code: \n \n", "id": "4"}, {"metadata": {"id": "Software System Document.pdf:6:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n6 \n \n \n \n#define SORT_BY_PID 1 \n#define SORT_BY_BURST 2 \n#define SORT_BY_START 3 \n \ntypedef struct \n{ \nint iPID; \nint iArrival, iBurst; \nint iStart , iFinish, iWaiting, iResponse, iTaT; \n} PCB; \n \nvoid inputProcess(int n, PCB P[]); \nvoid printProcess(int n, PCB P[]); \nvoid exportGanttChart (int n, PCB P[]); \nvoid pushProcess(int *n, PCB P[], PCB Q); \nvoid removeProcess(int *n, int index, PCB P[]); \nint swapProcess(PCB *P, PCB *Q); \nint partition (PCB P[], int low, int high, int iCriteria); \nvoid quickSort(PCB P[], int low, int high, int iCriteria); \nvoid calculateAWT(int n, PCB P[]); \nvoid calculateATaT(int n, PCB P[]); \nvoid SJF(int n, PCB P[]); \n \nint main() \n{ \nPCB Input[10]; \nPCB ReadyQueue[10]; \nPCB TerminatedArray[10]; \nint iNumberOfProcess; \nprintf(\"Please input number of Process: \"); \nscanf(\"%d\", &iNumberOfProcess); \nint iRemain = iNumberOfProcess, iReady = 0, iTerminated = 0; \ninputProcess(iNumberOfProcess, Input); \nquickSort(Input, 0, iNumberOfProcess - 1, SORT_BY_ARRIVAL); \nprintf(\"\\nYour process: \"); \nprintProcess(iRemain, Input); \npushProcess(&iReady, ReadyQueue, Input[0]); \nremoveProcess(&iRemain, 0, Input); \nReadyQueue[0].iStart = ReadyQueue[0].iArrival; \nReadyQueue[0].iFinish = ReadyQueue[0].iStart + ReadyQueue[0].iBurst; \nReadyQueue[0].iResponse = ReadyQueue[0].iStart - ReadyQueue[0].iArrival; \nReadyQueue[0].iWaiting = ReadyQueue[0].iResponse; \nReadyQueue[0].iTaT = ReadyQueue[0].iFinish - ReadyQueue[0].iArrival; \nwhile (iRemain!=0) \n", "id": "5"}, {"metadata": {"id": "Software System Document.pdf:7:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n7 \n \n \n \n{ \npushProcess(&iReady, ReadyQueue, Input[0]); \nremoveProcess(&iRemain, 0, Input); \n} \nint min, i, j, temp; \nfor(i=1;i<iReady;i++) \n{ \nmin = 1000000; \nfor(j = i;j < iReady; j++) \n{ \nif(ReadyQueue[j].iArrival <= ReadyQueue[i-1].iFinish && \nReadyQueue[j].iBurst < min) \n{ \nmin = ReadyQueue[j].iBurst; \ntemp = j; \n} \n} \nReadyQueue[temp].iStart = ReadyQueue[i-1].iFinish; \nReadyQueue[temp].iFinish = ReadyQueue[temp].iStart + \nReadyQueue[temp].iBurst; \nReadyQueue[temp].iWaiting = ReadyQueue[temp].iStart - \nReadyQueue[temp].iArrival; \nReadyQueue[temp].iResponse = ReadyQueue[temp].iStart - \nReadyQueue[temp].iArrival; \nReadyQueue[temp].iTaT = ReadyQueue[temp].iBurst + \nReadyQueue[temp].iWaiting; \nswapProcess(&ReadyQueue[temp],  &ReadyQueue[i]); \n} \nwhile(iReady!=0) \n{ \npushProcess(&iTerminated, TerminatedArray, ReadyQueue[0]); \nremoveProcess(&iReady, 0, ReadyQueue); \n} \nprintf(\"\\n===== SJF Scheduling =====\\n\"); \nexportGanttChart(iTerminated, TerminatedArray); \nquickSort(TerminatedArray, 0, iTerminated - 1, SORT_BY_PID); \ncalculateAWT(iTerminated, TerminatedArray); \ncalculateATaT(iTerminated, TerminatedArray); \nreturn 0; \n} \n \nvoid inputProcess(int n, PCB P[]) \n{ \nfor(int i=0;i<n;i++) \n", "id": "6"}, {"metadata": {"id": "Software System Document.pdf:8:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n8 \n \n \n \n{ \nP[i].iPID = i+1; \nP[i].iArrival = rand() % 21; \nP[i].iBurst = rand() % 11 + 2; \nP[i].iResponse = 0; \nP[i].iStart = 0; \nP[i].iFinish = 0; \nP[i].iStart = 0; \nP[i].iFinish = 0; \nP[i].iWaiting = 0; \nP[i].iResponse = 0; \nP[i].iTaT = 0; \n} \n} \n \nvoid printProcess(int n, PCB P[]) \n{ \nfor(int i=0;i<n;i++) \nprintf(\"\\nPID: %d, Arrival time: %d, Burst time: %d\", P[i].iPID, \nP[i].iArrival,  P[i].iBurst); \n} \n \nvoid exportGanttChart(int n, PCB P[]) \n{ \nprintf(\"\\nGantt Chart: \"); \nint time = 0; \nfor(int i=0;i<n;i++) \n{ \nprintf(\"\\n%d -> %d: P%d\", time, time + P[i].iBurst, P[i].iPID); \ntime += P[i].iBurst; \n} \n} \n \nvoid pushProcess(int *n, PCB P[], PCB Q) \n{ \nP[(*n)++] = Q; \n} \n \nvoid removeProcess(int *n, int index, PCB P[]) \n{ \nint number = *n; \nfor(int i=index;i<number;i++) \nP[i] = P[i+1]; \n(*n)--; \n", "id": "7"}, {"metadata": {"id": "Software System Document.pdf:9:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n9 \n \n \n \n} \n \nint swapProcess(PCB *P, PCB *Q) \n{ \nPCB temp = *P; \n*P = *Q; \n*Q = temp; \nreturn 1; \n} \n \nint partition (PCB P[], int low, int high, int iCriteria) \n{ \nint pivot = P[high].iBurst; \nint i = (low - 1); \nfor (int j = low; j < high; j++) \n{ \nif (iCriteria == SORT_BY_BURST && P[j].iBurst <= pivot) \n{ \ni++; \nswapProcess(&P[i], &P[j]); \n} \nif (iCriteria == SORT_BY_ARRIVAL && P[j].iArrival <= pivot) \n{ \ni++; \nswapProcess(&P[i], &P[j]); \n} \nif (iCriteria == SORT_BY_PID && P[j].iPID <= pivot) \n{ \ni++; \nswapProcess(&P[i], &P[j]); \n} \n} \nswapProcess(&P[i + 1], &P[high]); \nreturn (i + 1); \n} \n \nvoid quickSort(PCB P[], int low, int high, int iCriteria) \n{ \nif (low < high) \n{ \nint pi = partition(P, low, high, iCriteria); \nquickSort(P, low, pi - 1, iCriteria); \nquickSort(P, pi + 1, high, iCriteria); \n} \n", "id": "8"}, {"metadata": {"id": "Software System Document.pdf:10:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n10 \n \n \n \n \n Test case 1: \n \n} \nvoid calculateAWT(int n, PCB P[]) \n{ \nint result = 0; \nfor(int i=0;i<n;i++) \nP[i].iWaiting = P[i].iStart - P[i].iArrival; \nfor(int i=0;i<n;i++) \n{ \n//printf(\"\\nWT of P%d: %d\", P[i].iPID, P[i].iWaiting); \nresult += P[i].iWaiting; \n} \nprintf(\"\\nAWT:  %f\",  (float)result/n); \n} \nvoid calculateATaT(int n, PCB P[]) \n{ \nint result = 0; \nfor(int i=0;i<n;i++) \nP[i].iTaT = P[i].iFinish - P[i].iArrival; \nfor(int i=0;i<n;i++) \n{ \n//printf(\"\\nTaT of P%d: %d\", P[i].iPID, P[i].iTaT); \nresult += P[i].iTaT; \n} \nprintf(\"\\nATaT:  %f\",  (float)result/n); \n} \n", "id": "9"}, {"metadata": {"id": "Software System Document.pdf:11:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n11 \n \n \n \n- \nInput: \n \niArrival \niBurst \nP3 \n0 \n12 \nP2 \n8 \n4 \nP1 \n9 \n10 \nP4 \n16 \n9 \nP5 \n19 \n5 \n \n- \nGantt Chart \n \nP3 \nP2 \nP4 \nP5 \nP1 \n0 \n12 \n16 \n25 \n30 \n40 \n- AWT = (0 + 4 + 21 + 0 + 6)/5 = 6.2 \n- ATaT = (12 + 8 + 31 + 9 + 11)/5 = 14.2 \n \n \n Test case 2: \n \n", "id": "10"}, {"metadata": {"id": "Software System Document.pdf:12:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: Tr\u1ea7n Ho\u00e0ng L\u1ed9c. - \nInput: \n12 \n \n \n \niArrival \niBurst \nP3 \n0 \n12 \nP5 \n1 \n2 \nP1 \n3 \n2 \nP2 \n10 \n3 \nP4 \n15 \n2 \n- \nGant Chart: \n \nP3 \nP5 \nP1 \nP4 \nP2 \n                     0                       12                     14                      16                     18                     21 \n- \nAWT = (0 + 11 + 11 + 8 + 1)/5 =6.2 \n- \nATaT = (12 + 13 + 13 + 11 + 3)/5 = 10.4 \n Test case 3: \n \n", "id": "11"}, {"metadata": {"id": "Software System Document.pdf:13:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: Tr\u1ea7n Ho\u00e0ng L\u1ed9c.", "id": "12"}, {"metadata": {"id": "Software System Document.pdf:13:1"}, "page_content": "- \nInput: \n13 \n \n \n \niArrival \niBurst \nP4 \n0 \n11 \nP3 \n6 \n9 \nP1 \n17 \n9 \nP5 \n18 \n5 \nP2 \n20 \n8 \n- \nGant Chart: \n \nP4 \nP3 \nP5 \nP2 \nP1 \n                     0                         11                     20                      2                        33                     42 \n- \nAWT = (0 + 5 + 2 + 5 + 16)/5= 5.6 \n- \nATaT = (11 + 14 + 25 + 7 + 13)/5 = 14 \n \n \n \n \n \n2. Gi\u1ea3i thu\u1eadt Shortest-Remaining-Time-First ho\u1eb7c Round Robin \n Gi\u1ea3i thu\u1eadt Shortest-Remaining-Time-First \n", "id": "13"}, {"metadata": {"id": "Software System Document.pdf:14:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n14 \n \n \n \n", "id": "14"}, {"metadata": {"id": "Software System Document.pdf:15:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n15 \n \n \n \n \n Ch\u1ea1y tay l\u01b0u \u0111\u1ed3 gi\u1ea3i thu\u1eadt \n- Input: \n \n \niArrival \niBurst \nP1 \n0 \n6 \nP2 \n2 \n7 \nP3 \n5 \n8 \nP4 \n9 \n3 \nP5 \n12 \n6 \n", "id": "15"}, {"metadata": {"id": "Software System Document.pdf:16:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n16 \n \n \n#include <iostream> \n#include <queue> \nusing namespace std; \nstruct Process \n{ \nint name; \nint burst_time; \nint arrival_time; \n}; \nstatic double ave_turnaround_time = 0; \n \n \n\u0110\u1ea7u ti\u00ean, ch\u00fang ta s\u1ebd xem x\u00e9t th\u1eddi gian \u0111\u1ebfn (iArrival) v\u00e0 th\u1eddi gian x\u1eed l\u00fd \n(iBurst) c\u1ee7a m\u1ed7i ti\u1ebfn tr\u00ecnh: \n\u2022 \nP1: iArrival = 0, iBurst = 6 \n\u2022 \nP2: iArrival = 2, iBurst = 7 \n\u2022 \nP3: iArrival = 5, iBurst = 8 \n\u2022 \nP4: iArrival = 9, iBurst = 3 \n\u2022 \nP5: iArrival = 12, iBurst = 6 \nB\u00e2y gi\u1edd, ch\u00fang ta s\u1ebd b\u1eaft \u0111\u1ea7u gi\u1ea3 l\u1eadp: \n1. Th\u1eddi \u0111i\u1ec3m 0: Ti\u1ebfn tr\u00ecnh P1 \u0111\u1ebfn v\u00e0 b\u1eaft \u0111\u1ea7u x\u1eed l\u00fd.", "id": "16"}, {"metadata": {"id": "Software System Document.pdf:16:1"}, "page_content": "P1 s\u1ebd x\u1eed l\u00fd trong 6 \u0111\u01a1n v\u1ecb \nth\u1eddi gian.", "id": "17"}, {"metadata": {"id": "Software System Document.pdf:16:2"}, "page_content": "2.", "id": "18"}, {"metadata": {"id": "Software System Document.pdf:16:3"}, "page_content": "Th\u1eddi \u0111i\u1ec3m 2: Ti\u1ebfn tr\u00ecnh P2 \u0111\u1ebfn.", "id": "19"}, {"metadata": {"id": "Software System Document.pdf:16:4"}, "page_content": "Th\u1eddi gian c\u00f2n l\u1ea1i c\u1ee7a P1 l\u00e0 4 (6-2), nh\u1ecf h\u01a1n \nth\u1eddi gian x\u1eed l\u00fd c\u1ee7a P2 l\u00e0 7, n\u00ean P1 ti\u1ebfp t\u1ee5c x\u1eed l\u00fd.", "id": "20"}, {"metadata": {"id": "Software System Document.pdf:16:5"}, "page_content": "3.", "id": "21"}, {"metadata": {"id": "Software System Document.pdf:16:6"}, "page_content": "Th\u1eddi \u0111i\u1ec3m 5: Ti\u1ebfn tr\u00ecnh P3 \u0111\u1ebfn.", "id": "22"}, {"metadata": {"id": "Software System Document.pdf:16:7"}, "page_content": "Th\u1eddi gian c\u00f2n l\u1ea1i c\u1ee7a P1 l\u00e0 1 (6-5), nh\u1ecf h\u01a1n \nth\u1eddi gian x\u1eed l\u00fd c\u1ee7a P3 l\u00e0 8, n\u00ean P1 ti\u1ebfp t\u1ee5c x\u1eed l\u00fd.", "id": "23"}, {"metadata": {"id": "Software System Document.pdf:16:8"}, "page_content": "4.", "id": "24"}, {"metadata": {"id": "Software System Document.pdf:16:9"}, "page_content": "Th\u1eddi \u0111i\u1ec3m 6: P1 ho\u00e0n th\u00e0nh.", "id": "25"}, {"metadata": {"id": "Software System Document.pdf:16:10"}, "page_content": "L\u00fac n\u00e0y, P2 v\u00e0 P3 \u0111ang ch\u1edd, nh\u01b0ng th\u1eddi gian x\u1eed \nl\u00fd c\u1ee7a P2 l\u00e0 7 nh\u1ecf h\u01a1n th\u1eddi gian x\u1eed l\u00fd c\u1ee7a P3 l\u00e0 8, n\u00ean P2 s\u1ebd \u0111\u01b0\u1ee3c x\u1eed l\u00fd tr\u01b0\u1edbc.", "id": "26"}, {"metadata": {"id": "Software System Document.pdf:16:11"}, "page_content": "5.", "id": "27"}, {"metadata": {"id": "Software System Document.pdf:16:12"}, "page_content": "Th\u1eddi \u0111i\u1ec3m 9: Ti\u1ebfn tr\u00ecnh P4 \u0111\u1ebfn.", "id": "28"}, {"metadata": {"id": "Software System Document.pdf:16:13"}, "page_content": "Th\u1eddi gian c\u00f2n l\u1ea1i c\u1ee7a P2 l\u00e0 4 (7-3), l\u1edbn h\u01a1n \nth\u1eddi gian x\u1eed l\u00fd c\u1ee7a P4 l\u00e0 3, n\u00ean CPU s\u1ebd ng\u1eaft P2 v\u00e0 chuy\u1ec3n sang x\u1eed l\u00fd P4.", "id": "29"}, {"metadata": {"id": "Software System Document.pdf:16:14"}, "page_content": "6.", "id": "30"}, {"metadata": {"id": "Software System Document.pdf:16:15"}, "page_content": "Th\u1eddi \u0111i\u1ec3m 12: Ti\u1ebfn tr\u00ecnh P5 \u0111\u1ebfn.", "id": "31"}, {"metadata": {"id": "Software System Document.pdf:16:16"}, "page_content": "Th\u1eddi gian c\u00f2n l\u1ea1i c\u1ee7a P4 l\u00e0 0 (3-3), n\u00ean P4 \nho\u00e0n th\u00e0nh.", "id": "32"}, {"metadata": {"id": "Software System Document.pdf:16:17"}, "page_content": "L\u00fac n\u00e0y, P2, P3 v\u00e0 P5 \u0111ang ch\u1edd, nh\u01b0ng th\u1eddi gian c\u00f2n l\u1ea1i c\u1ee7a P2 l\u00e0 \n4 nh\u1ecf h\u01a1n th\u1eddi gian x\u1eed l\u00fd c\u1ee7a P3 l\u00e0 8 v\u00e0 P5 l\u00e0 6, n\u00ean P2 s\u1ebd \u0111\u01b0\u1ee3c x\u1eed l\u00fd ti\u1ebfp.", "id": "33"}, {"metadata": {"id": "Software System Document.pdf:16:18"}, "page_content": "7.", "id": "34"}, {"metadata": {"id": "Software System Document.pdf:16:19"}, "page_content": "Th\u1eddi \u0111i\u1ec3m 16: P2 ho\u00e0n th\u00e0nh.", "id": "35"}, {"metadata": {"id": "Software System Document.pdf:16:20"}, "page_content": "L\u00fac n\u00e0y, P3 v\u00e0 P5 \u0111ang ch\u1edd, nh\u01b0ng th\u1eddi gian x\u1eed \nl\u00fd c\u1ee7a P5 l\u00e0 6 nh\u1ecf h\u01a1n th\u1eddi gian x\u1eed l\u00fd c\u1ee7a P3 l\u00e0 8, n\u00ean P5 s\u1ebd \u0111\u01b0\u1ee3c x\u1eed l\u00fd tr\u01b0\u1edbc.", "id": "36"}, {"metadata": {"id": "Software System Document.pdf:16:21"}, "page_content": "8.", "id": "37"}, {"metadata": {"id": "Software System Document.pdf:16:22"}, "page_content": "Th\u1eddi \u0111i\u1ec3m 22: P5 ho\u00e0n th\u00e0nh.", "id": "38"}, {"metadata": {"id": "Software System Document.pdf:16:23"}, "page_content": "L\u00fac n\u00e0y, ch\u1ec9 c\u00f2n P3 \u0111ang ch\u1edd, n\u00ean P3 s\u1ebd \u0111\u01b0\u1ee3c \nx\u1eed l\u00fd.", "id": "39"}, {"metadata": {"id": "Software System Document.pdf:16:24"}, "page_content": "9.", "id": "40"}, {"metadata": {"id": "Software System Document.pdf:16:25"}, "page_content": "Th\u1eddi \u0111i\u1ec3m 30: P3 ho\u00e0n th\u00e0nh.", "id": "41"}, {"metadata": {"id": "Software System Document.pdf:16:26"}, "page_content": "Code: (Kh\u00f4ng theo template) \n \n", "id": "42"}, {"metadata": {"id": "Software System Document.pdf:17:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n17 \n \n \n \nstatic double ave_waiting_time = 0; \nstatic double ave_response_time = 0; \nvoid swap(Process &p1, Process &p2) \n{ \nProcess tmp; \ntmp = p1; \np1 = p2; \np2 = tmp; \n} \n \nint minBurstTime(Process *p, int n) \n{ \nint min = p[0].burst_time; \nint imin = 0; \nfor (int i = 0; i < n; i++) \n{ \nif (p[i].burst_time < min) \n{ \nmin = p[i].burst_time; \nimin = i; \n} \n} \nreturn imin; \n} \n \nvoid sortByArrivalTime(Process *p, int n) \n{ \nfor (int i = 0; i < n; i++) \n{ \nfor (int j = i + 1; j < n; j++) \n{ \nif (p[i].arrival_time < p[j].arrival_time) \n{ \nswap(p[i], p[j]); \n} \nelse \n{ \nif (p[i].arrival_time == p[j].arrival_time) \n{ \nif (p[i].burst_time < p[j].burst_time) \n{ \nswap(p[i], p[j]); \n} \n} \n", "id": "43"}, {"metadata": {"id": "Software System Document.pdf:18:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n18 \n \n \n \n} \n} \n} \n} \n \nvoid ShortestRemainingTimeFirst(Process *p, int n, int time_current, int \nburst_time) \n{ \nfor (int i = 0; i < n - 1; i++) \n{ \nfor (int j = i + 1; j < n; j++) \n{ \nif (p[i].burst_time < p[j].burst_time && p[i].arrival_time <= \ntime_current && p[i].burst_time < burst_time) \n{ \nswap(p[i], p[j]); \n} \n} \n} \n} \n \nvoid Input(Process *p, int n) \n{ \nfor (int i = 0; i < n; i++) \n{ \ncout << \"-----------------\" << endl; \ncout << \"P\" << i << \" ID process: \"; \ncin >> p[i].name; \ncout << \"P\" << i << \" burst time: \"; \ncin >> p[i].burst_time; \ncout << \"P\" << i << \" arrival time: \"; \ncin >> p[i].arrival_time; \n} \n} \n \nint check(int flag[], int n) \n{ \nfor (int i = 0; i < n; i++) \n{ \nif (flag[i] == 1) \nreturn 1; \n} \nreturn 0; \n} \n", "id": "44"}, {"metadata": {"id": "Software System Document.pdf:19:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n19 \n \n \n \n \nvoid SelectionFunction(Process *p, int n) \n{ \nProcess *p_temp = new Process[100]; \nint time_current = 0; \nint flag_c = 1; \nint flag_first_come[100]; \nint flag_previous; \nint flag_current; \nint waiting_time[100]; \nfor (int i = 0; i < 100; i++) \n{ \nwaiting_time[i] = 0; \nflag_first_come[i] = -1; \n} \nsortByArrivalTime(p, n); \nflag_first_come[p[n - 1].name] = p[n - 1].arrival_time; \nwhile (n > 0) \n{ \np[n - 1].burst_time--; \nfor (int i = 0; i < n; i++) \n{ \nif (p[i].arrival_time <= time_current) \n{ \nwaiting_time[p[i].name]++; \n} \n} \nwaiting_time[p[n - 1].name]--; \nif (flag_c == 1) \n{ \ntime_current = p[n - 1].arrival_time; \nflag_c = 0; \n} \ntime_current++; \nflag_previous = p[n - 1].name; \nif (p[n - 1].burst_time == 0) \n{ \ncout << p[n - 1].name << \" \n\" << flag_first_come[p[n - \n1].name] - p[n - 1].arrival_time << \" \n \" << waiting_time[p[n - \n1].name] << \" \n\" << (time_current - p[n - 1].arrival_time) << endl; \nave_waiting_time += waiting_time[p[n - 1].name]; \nave_turnaround_time += time_current - p[n - 1].arrival_time; \nave_response_time += flag_first_come[p[n - 1].name] - p[n - \n1].arrival_time; \n", "id": "45"}, {"metadata": {"id": "Software System Document.pdf:20:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n20 \n \n \n#include <stdio.h> \n#include <stdlib.h> \n#include <limits.h> \n#include <stdbool.h> \n#define SORT_BY_ARRIVAL 0 \n \n \n Code (theo template): \n \nn--; \nif (n == 0) \nreturn; \n} \nShortestRemainingTimeFirst(p, n, time_current, p[n - 1].burst_time); \nflag_current = p[n - 1].name; \nif (flag_current != flag_previous) \n{ \nif (flag_first_come[p[n - 1].name] == -1) \n{ \nflag_first_come[p[n - 1].name] = time_current; \n} \n} \n} \n} \nint main() \n{ \nProcess *p = new Process[100]; \nqueue<Process> pQueue; \nint n; \ncout << \"Number of process : \"; \ncin >> n; \nInput(p, n); \ncout << \"Process \nResponse-time \nWaiting-time \nTurn around-time\" << endl; \nSelectionFunction(p, n); \ncout << \"Avg Waiting Time: \" << ave_waiting_time / n << endl; \ncout << \"Avg Response Time: \" << ave_response_time / n << endl; \ncout << \"Avg Turnaround Time: \" << ave_turnaround_time / n << endl; \nsystem(\"pause\"); \nreturn 0; \n} \n", "id": "46"}, {"metadata": {"id": "Software System Document.pdf:21:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n21 \n \n \n \n#define SORT_BY_PID 1 \n#define SORT_BY_BURST 2 \n#define SORT_BY_START 3 \n \ntypedef struct { \nint iPID; \nint iArrival, iBurst; \nint iStart, iFinish, iWaiting, iResponse, iTaT; \n} PCB; \n \nvoid inputProcess(int n, PCB P[]) { \nint i; \nfor (i = 0; i < n; i++) { \nprintf(\"PID: \"); \nscanf(\"%d\", &P[i].iPID); \nprintf(\"Arrival Time: \"); \nscanf(\"%d\", &P[i].iArrival); \nprintf(\"Burst Time: \"); \nscanf(\"%d\", &P[i].iBurst); \nP[i].iWaiting = 0; \n} \n} \n \nvoid printProcess(int n, PCB P[]) { \nint i; \nfor (i = 0; i < n; i++) { \nprintf(\"PID: %d | Arrival Time: %d | Burst Time: %d | Start Time: %d \n| Finish Time: %d | Waiting Time: %d | Response Time: %d | Turnaround Time: \n%d\\n\", P[i].iPID, P[i].iArrival, P[i].iBurst, P[i].iStart, P[i].iFinish, \nP[i].iWaiting, P[i].iResponse, P[i].iTaT); \n} \n} \n \nvoid exportGanttChart(int n, PCB P[]) { \nprintf(\"\\nGantt Chart: \"); \nlong long time = 0; \nfor (int i = 0; i < n; i++) { \nif (P[i].iStart > time) { \nif (P[i].iStart < 0) { \nprintf(\"\\n%lld -> %d: Idle\", time, P[i].iFinish); \n} else { \nprintf(\"\\n%lld -> %d: Idle\", time, P[i].iStart); \n} \n} \n", "id": "47"}, {"metadata": {"id": "Software System Document.pdf:22:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n22 \n \n \n \nprintf(\"\\n%d -> %d: P%d\", P[i].iStart, P[i].iFinish, P[i].iPID); \ntime = P[i].iFinish; \n} \nprintf(\"\\n\"); \n} \n \n \nvoid pushProcess(int *n, PCB P[], PCB Q) { \nP[*n] = Q; \n(*n)++; \n} \n \nvoid removeProcess(int *n, int index, PCB P[]) { \nfor (int i = index; i < *n - 1; i++) { \nP[i] = P[i + 1]; \n} \n(*n)--; \n} \n \nvoid swapProcess(PCB *P, PCB *Q) { \nPCB temp = *P; \n*P = *Q; \n*Q = temp; \n} \n \nint partition(PCB P[], int low, int high, int iCriteria) { \nint pivot = P[high].iBurst; \nint i = (low - 1); \n \nfor (int j = low; j < high; j++) { \nif (iCriteria == SORT_BY_BURST && P[j].iBurst <= pivot) { \ni++; \nswapProcess(&P[i], &P[j]); \n} \nif (iCriteria == SORT_BY_ARRIVAL && P[j].iArrival <= pivot) { \ni++; \nswapProcess(&P[i], &P[j]); \n} \nif (iCriteria == SORT_BY_PID && P[j].iPID <= pivot) { \ni++; \nswapProcess(&P[i], &P[j]); \n} \n} \nswapProcess(&P[i + 1], &P[high]); \n", "id": "48"}, {"metadata": {"id": "Software System Document.pdf:23:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n23 \n \n \n \nreturn (i + 1); \n} \n \nvoid quickSort(PCB P[], int low, int high, int iCriteria) { \nif (low < high) { \nint pi = partition(P, low, high, iCriteria); \n \nquickSort(P, low, pi - 1, iCriteria); \nquickSort(P, pi + 1, high, iCriteria); \n} \n} \n \nvoid calculateAWT(int n, PCB P[]) { \nint sum = 0; \nfor (int i = 0; i < n; i++) { \nsum += P[i].iWaiting; \n} \nprintf(\"Average Waiting Time: %f\\n\", (float)sum / n); \n} \n \nvoid calculateATaT(int n, PCB P[]) { \nint sum = 0; \nfor (int i = 0; i < n; i++) { \nsum += P[i].iTaT; \n} \nprintf(\"Average Turnaround Time: %f\\n\", (float)sum / n); \n} \n \nbool allProcessesDone(int remainingBurstTimes[], int n) { \nfor (int i = 0; i < n; i++) { \nif (remainingBurstTimes[i] > 0) { \nreturn false; \n} \n} \nreturn true; \n} \n \nvoid SRTF(int n, PCB P[]) { \nint currentTime = 0; \nint remainingBurstTimes[10]; \n \nfor (int i = 0; i < n; i++) { \nremainingBurstTimes[i] = P[i].iBurst; \n} \n", "id": "49"}, {"metadata": {"id": "Software System Document.pdf:24:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n24 \n \n \n \n \nwhile (1) { \nint minRemainingBurst = INT_MAX; \nint shortestProcessIndex = -1; \n \nint allProcessesDone = 1; \n \nfor (int i = 0; i < n; i++) { \nif (remainingBurstTimes[i] > 0 && P[i].iArrival <= currentTime) { \nallProcessesDone = 0; \n \nif (remainingBurstTimes[i] < minRemainingBurst) { \nminRemainingBurst = remainingBurstTimes[i]; \nshortestProcessIndex = i; \n} \n} \n} \n \nif (allProcessesDone) { \nbreak; \n} \n \nif (shortestProcessIndex == -1) { \ncurrentTime++; \ncontinue; \n} \n \nif (P[shortestProcessIndex].iStart == -1) { \nP[shortestProcessIndex].iStart = currentTime; \n} \n \nP[shortestProcessIndex].iFinish = currentTime + 1; \nremainingBurstTimes[shortestProcessIndex]--; \n \nif (remainingBurstTimes[shortestProcessIndex] == 0) { \nP[shortestProcessIndex].iFinish = currentTime + 1; \n} \n \ncurrentTime++; \n} \n \nfor (int i = 0; i < n; i++) { \nP[i].iResponse = P[i].iStart - P[i].iArrival; \nP[i].iTaT = P[i].iFinish - P[i].iArrival; \n", "id": "50"}, {"metadata": {"id": "Software System Document.pdf:25:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n25 \n \n \n \n \n \n Test case1: \n} \n} \nint main() { \nPCB Input[10]; \nPCB ReadyQueue[10]; \nPCB TerminatedArray[10]; \nint iNumberOfProcess; \nprintf(\"Please input number of Process: \"); \nscanf(\"%d\", &iNumberOfProcess); \nint iRemain = iNumberOfProcess, iReady = 0, iTerminated = 0; \ninputProcess(iNumberOfProcess, Input); \nquickSort(Input, 0, iNumberOfProcess - 1, SORT_BY_ARRIVAL); \npushProcess(&iReady, ReadyQueue, Input[0]); \nremoveProcess(&iRemain, 0, Input); \nReadyQueue[0].iStart = ReadyQueue[0].iArrival; \nReadyQueue[0].iFinish = ReadyQueue[0].iStart + ReadyQueue[0].iBurst; \nReadyQueue[0].iResponse = ReadyQueue[0].iStart - ReadyQueue[0].iArrival; \nReadyQueue[0].iWaiting = ReadyQueue[0].iResponse; \nReadyQueue[0].iTaT = ReadyQueue[0].iFinish - ReadyQueue[0].iArrival; \nwhile (iRemain != 0) { \npushProcess(&iReady, ReadyQueue, Input[0]); \nremoveProcess(&iRemain, 0, Input); \n} \nSRTF(iReady, ReadyQueue); \nwhile(iReady != 0) { \npushProcess(&iTerminated, TerminatedArray, ReadyQueue[0]); \nremoveProcess(&iReady, 0, ReadyQueue); \n} \nprintf(\"\\n===== SRTF Scheduling =====\\n\"); \nexportGanttChart(iTerminated, TerminatedArray); \nquickSort(TerminatedArray, 0, iTerminated - 1, SORT_BY_PID); \ncalculateAWT(iTerminated, TerminatedArray); \ncalculateATaT(iTerminated, TerminatedArray); \nreturn 0; \n} \n", "id": "51"}, {"metadata": {"id": "Software System Document.pdf:26:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n26 \n \n \n \n \n\u2022 Input: \n \n\u2022 Ganttchart: \n \n\u2022 AWT = 21 / 5 = 4.2 \n\u2022 ATaT = 57 / 4 = 11.4 \n", "id": "52"}, {"metadata": {"id": "Software System Document.pdf:27:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n27 \n \n \n \n Test case2: \n \n\u2022 Input: \n \n\u2022 Ganttchart \n", "id": "53"}, {"metadata": {"id": "Software System Document.pdf:28:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n28 \n \n \n \n \n \n\u2022 AWT = 27 / 5 = 5.4 \n\u2022 AtaT = 62 / 5 = 12.4 \n Test case3: \n \n\u2022 Input: \n", "id": "54"}, {"metadata": {"id": "Software System Document.pdf:29:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n29 \n \n \n \n \n \n \n\u2022 Ganttchart: \n \n\u2022 AWT = 60 / 5 = 12 \n\u2022 AtaT = 116 / 5 = 23.2 \n2.6. B\u00c0I T\u1eacP \u00d4N T\u1eacP \n1.", "id": "55"}, {"metadata": {"id": "Software System Document.pdf:29:1"}, "page_content": "Gi\u1ea3i thu\u1eadt Shortest-Remaining-Time-First ho\u1eb7c Round Robin \n Gi\u1ea3i thu\u1eadt Round Robin \n", "id": "56"}, {"metadata": {"id": "Software System Document.pdf:30:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n30 \n \n \n \n \n \n \n Ch\u1ea1y tay l\u01b0u \u0111\u1ed3 gi\u1ea3i thu\u1eadt : \n-Input: \n \n \niArrival \niBurst \nP1 \n0 \n6 \nP2 \n2 \n7 \nP3 \n5 \n8 \nP4 \n9 \n3 \n", "id": "57"}, {"metadata": {"id": "Software System Document.pdf:31:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n31 \n \n \n#include <iostream> \n#include <queue> \nusing namespace std; \nstruct Process \n{ \nint name; \nint burst_time; \nint arrival_time; \n}; \n \nP5 \n12 \n6 \n \n \n\u0110\u1ea7u ti\u00ean, ch\u00fang ta s\u1ebd xem x\u00e9t th\u1eddi gian \u0111\u1ebfn (iArrival) v\u00e0 th\u1eddi gian x\u1eed l\u00fd (iBurst) c\u1ee7a \nm\u1ed7i ti\u1ebfn tr\u00ecnh: \n\u2022 \nP1: iArrival = 0, iBurst = 6 \n\u2022 \nP2: iArrival = 2, iBurst = 7 \n\u2022 \nP3: iArrival = 5, iBurst = 8 \n\u2022 \nP4: iArrival = 9, iBurst = 3 \n\u2022 \nP5: iArrival = 12, iBurst = 6 \n\u2713 Quantum time = 3 \nB\u00e2y gi\u1edd, ch\u00fang ta s\u1ebd b\u1eaft \u0111\u1ea7u gi\u1ea3 l\u1eadp: \n1. P1 ch\u1ea1y t\u1eeb th\u1eddi \u0111i\u1ec3m 0 \u0111\u1ebfn 3.", "id": "58"}, {"metadata": {"id": "Software System Document.pdf:31:1"}, "page_content": "2.", "id": "59"}, {"metadata": {"id": "Software System Document.pdf:31:2"}, "page_content": "P2 ch\u1ea1y t\u1eeb th\u1eddi \u0111i\u1ec3m 3 \u0111\u1ebfn 6.", "id": "60"}, {"metadata": {"id": "Software System Document.pdf:31:3"}, "page_content": "3.", "id": "61"}, {"metadata": {"id": "Software System Document.pdf:31:4"}, "page_content": "P1 ti\u1ebfp t\u1ee5c ch\u1ea1y t\u1eeb th\u1eddi \u0111i\u1ec3m 6 \u0111\u1ebfn 9 v\u00e0 ho\u00e0n th\u00e0nh.", "id": "62"}, {"metadata": {"id": "Software System Document.pdf:31:5"}, "page_content": "4.", "id": "63"}, {"metadata": {"id": "Software System Document.pdf:31:6"}, "page_content": "P3 ch\u1ea1y t\u1eeb th\u1eddi \u0111i\u1ec3m 9 \u0111\u1ebfn 12.", "id": "64"}, {"metadata": {"id": "Software System Document.pdf:31:7"}, "page_content": "5.", "id": "65"}, {"metadata": {"id": "Software System Document.pdf:31:8"}, "page_content": "P2 ti\u1ebfp t\u1ee5c ch\u1ea1y t\u1eeb th\u1eddi \u0111i\u1ec3m 12 \u0111\u1ebfn 15 v\u00e0 ho\u00e0n th\u00e0nh.", "id": "66"}, {"metadata": {"id": "Software System Document.pdf:31:9"}, "page_content": "6.", "id": "67"}, {"metadata": {"id": "Software System Document.pdf:31:10"}, "page_content": "P4 ch\u1ea1y t\u1eeb th\u1eddi \u0111i\u1ec3m 15 \u0111\u1ebfn 18 v\u00e0 ho\u00e0n th\u00e0nh.", "id": "68"}, {"metadata": {"id": "Software System Document.pdf:31:11"}, "page_content": "7.", "id": "69"}, {"metadata": {"id": "Software System Document.pdf:31:12"}, "page_content": "P3 ti\u1ebfp t\u1ee5c ch\u1ea1y t\u1eeb th\u1eddi \u0111i\u1ec3m 18 \u0111\u1ebfn 21.", "id": "70"}, {"metadata": {"id": "Software System Document.pdf:31:13"}, "page_content": "8.", "id": "71"}, {"metadata": {"id": "Software System Document.pdf:31:14"}, "page_content": "P2 ti\u1ebfp t\u1ee5c ch\u1ea1y n\u1ed1t 1 \u0111\u01a1n v\u1ecb th\u1eddi gian c\u00f2n l\u1ea1i \u0111\u1ebfn 22.", "id": "72"}, {"metadata": {"id": "Software System Document.pdf:31:15"}, "page_content": "9.", "id": "73"}, {"metadata": {"id": "Software System Document.pdf:31:16"}, "page_content": "P5 ch\u1ea1y t\u1eeb th\u1eddi \u0111i\u1ec3m 22 \u0111\u1ebfn 25.", "id": "74"}, {"metadata": {"id": "Software System Document.pdf:31:17"}, "page_content": "10.", "id": "75"}, {"metadata": {"id": "Software System Document.pdf:31:18"}, "page_content": "P3 ti\u1ebfp t\u1ee5c ch\u1ea1y t\u1eeb th\u1eddi \u0111i\u1ec3m 25 \u0111\u1ebfn 27 v\u00e0 ho\u00e0n th\u00e0nh.", "id": "76"}, {"metadata": {"id": "Software System Document.pdf:31:19"}, "page_content": "11.", "id": "77"}, {"metadata": {"id": "Software System Document.pdf:31:20"}, "page_content": "P5 ti\u1ebfp t\u1ee5c ch\u1ea1y t\u1eeb th\u1eddi \u0111i\u1ec3m 27 \u0111\u1ebfn 30 v\u00e0 ho\u00e0n th\u00e0nh.", "id": "78"}, {"metadata": {"id": "Software System Document.pdf:31:21"}, "page_content": "Code (kh\u00f4ng theo template): \n \n", "id": "79"}, {"metadata": {"id": "Software System Document.pdf:32:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n32 \n \n \n \nstatic double ave_turnaround_time = 0; \nstatic double ave_waiting_time = 0; \nstatic double ave_response_time = 0; \nvoid swap(Process &p1, Process &p2) \n{ \nProcess tmp; \ntmp = p1; \np1 = p2; \np2 = tmp; \n} \n \nint minBurstTime(Process *p, int n) \n{ \nint min = p[0].burst_time; \nint imin = 0; \nfor (int i = 0; i < n; i++) \n{ \nif (p[i].burst_time < min) \n{ \nmin = p[i].burst_time; \nimin = i; \n} \n} \nreturn imin; \n} \n \nvoid sortByArrivalTime(Process *p, int n) \n{ \nfor (int i = 0; i < n; i++) \n{ \nfor (int j = i + 1; j < n; j++) \n{ \nif (p[i].arrival_time < p[j].arrival_time) \n{ \nswap(p[i], p[j]); \n} \nelse \n{ \nif (p[i].arrival_time == p[j].arrival_time) \n{ \nif (p[i].burst_time < p[j].burst_time) \n{ \nswap(p[i], p[j]); \n} \n", "id": "80"}, {"metadata": {"id": "Software System Document.pdf:33:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n33 \n \n \n \n} \n} \n} \n} \n} \n \nvoid ShortestRemainingTimeFirst(Process *p, int n, int time_current, int \nburst_time) \n{ \nfor (int i = 0; i < n - 1; i++) \n{ \nfor (int j = i + 1; j < n; j++) \n{ \nif (p[i].burst_time < p[j].burst_time && p[i].arrival_time <= \ntime_current && p[i].burst_time < burst_time) \n{ \nswap(p[i], p[j]); \n} \n} \n} \n} \n \nvoid Input(Process *p, int n) \n{ \nfor (int i = 0; i < n; i++) \n{ \ncout << \"-----------------\" << endl; \ncout << \"P\" << i << \" ID process: \"; \ncin >> p[i].name; \ncout << \"P\" << i << \" burst time: \"; \ncin >> p[i].burst_time; \ncout << \"P\" << i << \" arrival time: \"; \ncin >> p[i].arrival_time; \n} \n} \n \nint check(int flag[], int n) \n{ \nfor (int i = 0; i < n; i++) \n{ \nif (flag[i] == 1) \nreturn 1; \n} \nreturn 0; \n", "id": "81"}, {"metadata": {"id": "Software System Document.pdf:34:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n34 \n \n \n \n} \n \nvoid SelectionFunction(Process *p, int n) \n{ \nProcess *p_temp = new Process[100]; \nint time_current = 0; \nint flag_c = 1; \nint flag_first_come[100]; \nint flag_previous; \nint flag_current; \nint waiting_time[100]; \nfor (int i = 0; i < 100; i++) \n{ \nwaiting_time[i] = 0; \nflag_first_come[i] = -1; \n \n} \nsortByArrivalTime(p, n); \nflag_first_come[p[n - 1].name] = p[n - 1].arrival_time; \nwhile (n > 0) \n{ \np[n - 1].burst_time--; \nfor (int i = 0; i < n; i++) \n{ \nif (p[i].arrival_time <= time_current) \n{ \nwaiting_time[p[i].name]++; \n} \n} \nwaiting_time[p[n - 1].name]--; \nif (flag_c == 1) \n{ \ntime_current = p[n - 1].arrival_time; \nflag_c = 0; \n} \ntime_current++; \nflag_previous = p[n - 1].name; \nif (p[n - 1].burst_time == 0) \n{ \ncout << p[n - 1].name << \" \n\" << flag_first_come[p[n - \n1].name] - p[n - 1].arrival_time << \" \n \" << waiting_time[p[n - \n1].name] << \" \n\" << (time_current - p[n - 1].arrival_time) << endl; \nave_waiting_time += waiting_time[p[n - 1].name]; \nave_turnaround_time += time_current - p[n - 1].arrival_time; \n", "id": "82"}, {"metadata": {"id": "Software System Document.pdf:35:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n35 \n \n \n#include <stdio.h> \n#include <stdlib.h> \n#include <limits.h> \n \n \n \n Code (theo template): \n \nave_response_time += flag_first_come[p[n - 1].name] - p[n - \n1].arrival_time; \nn--; \nif (n == 0) \nreturn; \n} \nShortestRemainingTimeFirst(p, n, time_current, p[n - 1].burst_time); \nflag_current = p[n - 1].name; \nif (flag_current != flag_previous) \n{ \nif (flag_first_come[p[n - 1].name] == -1) \n{ \nflag_first_come[p[n - 1].name] = time_current; \n} \n} \n} \n} \nint main() \n{ \nProcess *p = new Process[100]; \nqueue<Process> pQueue; \nint n; \ncout << \"Number of process : \"; \ncin >> n; \nInput(p, n); \ncout << \"Process \nResponse-time \nWaiting-time \nTurn around-time\" << endl; \nSelectionFunction(p, n); \ncout << \"Avg Waiting Time: \" << ave_waiting_time / n << endl; \ncout << \"Avg Response Time: \" << ave_response_time / n << endl; \ncout << \"Avg Turnaround Time: \" << ave_turnaround_time / n << endl; \nsystem(\"pause\"); \nreturn 0; \n} \n", "id": "83"}, {"metadata": {"id": "Software System Document.pdf:36:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n36 \n \n \n \n#include <stdbool.h> \n \n#define SORT_BY_ARRIVAL 0 \n#define SORT_BY_PID 1 \n#define SORT_BY_BURST 2 \n#define SORT_BY_START 3 \n \ntypedef struct { \nint iPID; \nint iArrival, iBurst; \nint iStart, iFinish, iWaiting, iResponse, iTaT; \n} PCB; \n \nvoid inputProcess(int n, PCB P[]) { \nint i; \nfor (i = 0; i < n; i++) { \nprintf(\"PID: \"); \nscanf(\"%d\", &P[i].iPID); \nprintf(\"Arrival Time: \"); \nscanf(\"%d\", &P[i].iArrival); \nprintf(\"Burst Time: \"); \nscanf(\"%d\", &P[i].iBurst); \nP[i].iWaiting = 0; \n} \n} \n \nvoid printProcess(int n, PCB P[]) { \nint i; \nfor (i = 0; i < n; i++) { \nprintf(\"PID: %d | Arrival Time: %d | Burst Time: %d | Start Time: %d | \nFinish Time: %d | Waiting Time: %d | Response Time: %d | Turnaround Time: %d\\n\", \nP[i].iPID, P[i].iArrival, P[i].iBurst, P[i].iStart, P[i].iFinish, P[i].iWaiting, \nP[i].iResponse, P[i].iTaT); \n} \n} \n \nvoid exportGanttChart(int n, PCB P[], int quantum) { \nprintf(\"\\nGantt Chart: \"); \nint time = 0; \nint rem_bt[n]; \nfor (int i = 0; i < n; i++) \nrem_bt[i] = P[i].iBurst; \nwhile (1) { \nbool done = true; \n", "id": "84"}, {"metadata": {"id": "Software System Document.pdf:37:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n37 \n \n \n \nfor (int i = 0; i < n; i++) { \nif (rem_bt[i] > 0) { \ndone = false; \nif (rem_bt[i] > quantum) { \nprintf(\"\\n%d -> %d: P%d\", time, time + quantum, P[i].iPID); \ntime += quantum; \nrem_bt[i] -= quantum; \n} \nelse { \nprintf(\"\\n%d -> %d: P%d\", time, time + rem_bt[i], P[i].iPID); \ntime += rem_bt[i]; \nrem_bt[i] = 0; \n} \n} \n} \nif (done == true) \nbreak; \n} \n} \n \n \n \nvoid pushProcess(int *n, PCB P[], PCB Q) { \nP[*n] = Q; \n(*n)++; \n} \n \nvoid removeProcess(int *n, int index, PCB P[]) { \nfor (int i = index; i < *n - 1; i++) { \nP[i] = P[i + 1]; \n} \n(*n)--; \n} \n \nvoid swapProcess(PCB *P, PCB *Q) { \nPCB temp = *P; \n*P = *Q; \n*Q = temp; \n} \n \nint partition(PCB P[], int low, int high, int iCriteria) { \nint pivot = P[high].iBurst; \nint i = (low - 1); \n", "id": "85"}, {"metadata": {"id": "Software System Document.pdf:38:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n38 \n \n \n \nfor (int j = low; j < high; j++) { \nif (iCriteria == SORT_BY_BURST && P[j].iBurst <= pivot) { \ni++; \nswapProcess(&P[i], &P[j]); \n} \nif (iCriteria == SORT_BY_ARRIVAL && P[j].iArrival <= pivot) { \ni++; \nswapProcess(&P[i], &P[j]); \n} \nif (iCriteria == SORT_BY_PID && P[j].iPID <= pivot) { \ni++; \nswapProcess(&P[i], &P[j]); \n} \n} \nswapProcess(&P[i + 1], &P[high]); \nreturn (i + 1); \n} \n \nvoid quickSort(PCB P[], int low, int high, int iCriteria) { \nif (low < high) { \nint pi = partition(P, low, high, iCriteria); \n \nquickSort(P, low, pi - 1, iCriteria); \nquickSort(P, pi + 1, high, iCriteria); \n} \n} \n \nvoid calculateAWT(int n, PCB P[]) { \nint sum = 0; \nfor (int i = 0; i < n; i++) { \nsum += P[i].iWaiting; \n} \nprintf(\"Average Waiting Time: %f\\n\", (float)sum / n); \n} \n \nvoid calculateATaT(int n, PCB P[]) { \nint sum = 0; \nfor (int i = 0; i < n; i++) { \nsum += P[i].iTaT; \n} \nprintf(\"Average Turnaround Time: %f\\n\", (float)sum / n); \n} \n \nbool allProcessesDone(int remainingBurstTimes[], int n) { \n", "id": "86"}, {"metadata": {"id": "Software System Document.pdf:39:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n39 \n \n \n \nfor (int i = 0; i < n; i++) { \nif (remainingBurstTimes[i] > 0) { \nreturn false; \n} \n} \nreturn true; \n} \n \nvoid roundRobin(PCB P[], int n, int quantum) { \nint time = 0; \nint finish = 0; \n \n// Kh\u1edfi t\u1ea1o m\u1ea3ng ch\u1ee9a th\u1eddi gian c\u00f2n l\u1ea1i c\u1ee7a t\u1eebng ti\u1ebfn tr\u00ecnh \nint rem_bt[n]; \nfor (int i = 0; i < n; i++) \nrem_bt[i] = P[i].iBurst; \n \n// V\u00f2ng l\u1eb7p ch\u00ednh c\u1ee7a thu\u1eadt to\u00e1n Round Robin \nwhile (finish < n) { \nbool found = false; \nfor (int i = 0; i < n; i++) { \nif (rem_bt[i] > 0 && P[i].iArrival <= time) { \nfound = true; \n// Ti\u1ebfn tr\u00ecnh i s\u1ebd \u0111\u01b0\u1ee3c CPU th\u1ef1c thi trong l\u01b0\u1ee3ng th\u1eddi gian \nquantum ho\u1eb7c \u0111\u1ebfn khi n\u00f3 ho\u00e0n th\u00e0nh \nint t = (rem_bt[i] > quantum) ? quantum : rem_bt[i]; \nrem_bt[i] -= t; \ntime += t; \n \n \ngian quay v\u00f2ng \n// N\u1ebfu ti\u1ebfn tr\u00ecnh i \u0111\u00e3 ho\u00e0n th\u00e0nh, c\u1eadp nh\u1eadt th\u1eddi gian ch\u1edd v\u00e0 th\u1eddi \n \nif (rem_bt[i] == 0) { \nfinish++; \nP[i].iWaiting = time - P[i].iArrival - P[i].iBurst; \nP[i].iTaT = time - P[i].iArrival; \n} \n} \n} \n \n// N\u1ebfu kh\u00f4ng t\u00ecm th\u1ea5y ti\u1ebfn tr\u00ecnh n\u00e0o \u0111\u1ec3 th\u1ef1c thi, t\u0103ng th\u1eddi gian \nif (!found) \ntime++; \n} \n} \n", "id": "87"}, {"metadata": {"id": "Software System Document.pdf:40:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n40 \n \n \n \n \n \n Test case1: \n \n\u2022 Input: \nint main() { \nPCB Input[10]; \nPCB ReadyQueue[15]; \nPCB TerminatedArray[15]; \nint iNumberOfProcess; \nprintf(\"Please input number of Process: \"); \nscanf(\"%d\", &iNumberOfProcess); \nint iRemain = iNumberOfProcess, iReady = 0, iTerminated = 0; \ninputProcess(iNumberOfProcess, Input); \nquickSort(Input, 0, iNumberOfProcess - 1, SORT_BY_ARRIVAL); \nint quantum; \nprintf(\"Please input the time quantum for Round Robin scheduling: \"); \nscanf(\"%d\", &quantum); \nroundRobin(Input, iNumberOfProcess, quantum); \nprintf(\"\\n===== Round Robin Scheduling =====\\n\"); \nexportGanttChart(iNumberOfProcess, Input, quantum); \nquickSort(Input, 0, iNumberOfProcess - 1, SORT_BY_PID); \ncalculateAWT(iNumberOfProcess, Input); \ncalculateATaT(iNumberOfProcess, Input); \nreturn 0; \n} \n", "id": "88"}, {"metadata": {"id": "Software System Document.pdf:41:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n41 \n \n \n \n \n \n\u2022 Ganttchart: \n \n\u2022 AWT = 35 / 5 = 7 \n\u2022 ATaT = 71 / 5 = 14.2 \n \n Test case2: \n \n\u2022 Input: \n \n\u2022 Ganttchart: \n \n\u2022 AWT = 35 / 5 = 7 \n\u2022 AtaT = 65 / 5 = 13 \n", "id": "89"}, {"metadata": {"id": "Software System Document.pdf:42:0"}, "page_content": "B\u00e1o c\u00e1o th\u1ef1c h\u00e0nh m\u00f4n H\u1ec7 \u0111i\u1ec1u h\u00e0nh - Gi\u1ea3ng vi\u00ean: \u0110o\u00e0n Duy \n42 \n \n \n \n Test case3: \n \n\u2022 Input: \n \n\u2022 Ganttchart: \n \n\u2022 AWT = 30 / 5 = 6 \n\u2022 AtaT = 60 / 5 = 12 \n", "id": "90"}, {"metadata": {"id": "dkhp_doc.pdf:1:0"}, "page_content": "\u0110\u1ea0I H\u1eccC QU\u1ed0C GIA TH\u00c0NH PH\u1ed0 H\u1ed2 CH\u00cd MINH \nTR\u01af\u1edcNG \u0110\u1ea0I H\u1eccC C\u00d4NG NGH\u1ec6 TH\u00d4NG TIN \n \n \n \n \nH\u01af\u1edaNG D\u1eaaN \n\u0110\u0102NG K\u00dd H\u1eccC PH\u1ea6N \u2013 PHI\u00caN B\u1ea2N M\u1edaI \n \n \n \n \n \n \n \n \n!\" Tp. H\u1ed3 Ch\u00ed Minh, 08/2023 #$ \n", "id": "91"}, {"metadata": {"id": "dkhp_doc.pdf:2:0"}, "page_content": " \nM\u1ee4C L\u1ee4C \n1. \u0110\u0103ng nh\u1eadp .................................................................................................", "id": "92"}, {"metadata": {"id": "dkhp_doc.pdf:2:1"}, "page_content": "3 \n2.", "id": "93"}, {"metadata": {"id": "dkhp_doc.pdf:2:2"}, "page_content": "X\u00e1c nh\u1eadn L\u1edbp \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 \u0111\u0103ng k\u00fd t\u1eeb Ph\u00f2ng \u0110T\u0110H/CT\u0110B ..............", "id": "94"}, {"metadata": {"id": "dkhp_doc.pdf:2:3"}, "page_content": "4 \n3.", "id": "95"}, {"metadata": {"id": "dkhp_doc.pdf:2:4"}, "page_content": "\u0110\u0103ng k\u00fd h\u1ecdc ph\u1ea7n .....................................................................................", "id": "96"}, {"metadata": {"id": "dkhp_doc.pdf:2:5"}, "page_content": "5 \n4.", "id": "97"}, {"metadata": {"id": "dkhp_doc.pdf:2:6"}, "page_content": "X\u00f3a \u0111\u0103ng k\u00fd h\u1ecdc ph\u1ea7n ..............................................................................", "id": "98"}, {"metadata": {"id": "dkhp_doc.pdf:2:7"}, "page_content": "8 \n \n \n \n \n", "id": "99"}, {"metadata": {"id": "dkhp_doc.pdf:3:0"}, "page_content": "N\u1ed8I DUNG \n1. \u0110\u0103ng nh\u1eadp \n- \nTruy c\u1eadp v\u00e0o trang https://dkhp.uit.edu.vn \n- \nD\u00f9ng t\u00e0i kho\u1ea3n ch\u1ee9ng th\u1ef1c \u0111\u1ec3 \u0111\u0103ng nh\u1eadp \n \n \n \n- \nSau khi \u0111\u0103ng nh\u1eadp xong, m\u00e0n h\u00ecnh xu\u1ea5t hi\u1ec7n nh\u01b0 sau: \n \n \n \n", "id": "100"}, {"metadata": {"id": "dkhp_doc.pdf:4:0"}, "page_content": "2.", "id": "101"}, {"metadata": {"id": "dkhp_doc.pdf:4:1"}, "page_content": "X\u00e1c nh\u1eadn L\u1edbp \u0111\u01b0\u1ee3c h\u1ed7 tr\u1ee3 \u0111\u0103ng k\u00fd t\u1eeb Ph\u00f2ng \u0110T\u0110H/CT\u0110B \no B\u01b0\u1edbc 1: V\u00e0o menu X\u00e1c nh\u1eadn \u0110\u0103ng k\u00fd H\u1ecdc Ph\u1ea7n \no B\u01b0\u1edbc 2: Ki\u1ec3m tra k\u1ef9 danh s\u00e1ch \u0111\u0103ng k\u00fd \no B\u01b0\u1edbc 3: Nh\u1ea5n button \u0110\u1ed3ng \u00fd n\u1ebfu mu\u1ed1n x\u00e1c nh\u1eadn, kh\u00f4ng l\u00e0m g\u00ec n\u1ebfu kh\u00f4ng mu\u1ed1n x\u00e1c nh\u1eadn. Sau th\u1eddi gian x\u00e1c nh\u1eadn, sinh vi\u00ean n\u00e0o \u0111\u00e3 x\u00e1c nh\u1eadn \u0111\u1ed3ng \u00fd s\u1ebd gi\u1eef l\u1ea1i \u0110KHP, sinh vi\u00ean kh\u00f4ng \nth\u1ef1c hi\u1ec7n s\u1ebd b\u1ecb x\u00f3a \u0111\u0103ng k\u00fd h\u1ecdc ph\u1ea7n.", "id": "102"}, {"metadata": {"id": "dkhp_doc.pdf:4:2"}, "page_content": "Sinh vi\u00ean d\u00f9 \u0111\u1ed3ng \u00fd hay kh\u00f4ng v\u1eabn c\u00f3 th\u1ec3 ti\u1ebfn h\u00e0nh \n\u0110\u0103ng k\u00fd h\u1ecdc ph\u1ea7n b\u00ecnh th\u01b0\u1eddng.", "id": "103"}, {"metadata": {"id": "dkhp_doc.pdf:4:3"}, "page_content": "", "id": "104"}, {"metadata": {"id": "dkhp_doc.pdf:5:0"}, "page_content": "3.", "id": "105"}, {"metadata": {"id": "dkhp_doc.pdf:5:1"}, "page_content": "\u0110\u0103ng k\u00fd h\u1ecdc ph\u1ea7n \nC\u00e1c b\u01b0\u1edbc \u0111\u0103ng k\u00fd h\u1ecdc ph\u1ea7n: \no B\u01b0\u1edbc 1: Chuy\u1ec3n sang menu \u0110\u0103ng k\u00fd H\u1ecdc ph\u1ea7n. H\u00ecnh 1: Giao di\u1ec7n ch\u00ednh khi \u0111\u0103ng k\u00fd h\u1ecdc ph\u1ea7n \no B\u01b0\u1edbc 2: T\u00ecm ki\u1ebfm danh s\u00e1ch m\u00e3 l\u1edbp c\u1ea7n \u0111\u0103ng k\u00fd b\u1eb1ng thanh t\u00ecm ki\u1ebfm.", "id": "106"}, {"metadata": {"id": "dkhp_doc.pdf:5:2"}, "page_content": "H\u00ecnh 2: H\u01b0\u1edbng d\u1eabn t\u00ecm ki\u1ebfm m\u00e3 l\u1edbp \no B\u01b0\u1edbc 3: Ch\u1ecdn c\u00e1c l\u1edbp c\u1ea7n \u0111\u0103ng k\u00fd.", "id": "107"}, {"metadata": {"id": "dkhp_doc.pdf:5:3"}, "page_content": "H\u00ecnh 3: H\u01b0\u1edbng d\u1eabn ch\u1ecdn m\u00e3 l\u1edbp \n", "id": "108"}, {"metadata": {"id": "dkhp_doc.pdf:6:0"}, "page_content": "o B\u01b0\u1edbc 4: B\u1ea5m n\u00fat \u0111\u0103ng k\u00fd sau khi xem xong danh s\u00e1ch c\u00e1c l\u1edbp \u0111\u00e3 ch\u1ecdn \u1edf \nngay b\u00ean d\u01b0\u1edbi. H\u00ecnh 4: H\u01b0\u1edbng d\u1eabn \u0111\u0103ng k\u00fd c\u00e1c l\u1edbp \u0111\u00e3 ch\u1ecdn \no B\u01b0\u1edbc 5: G\u1ed3m 2 b\u01b0\u1edbc nh\u1ecf \n- N\u1ebfu c\u00e1c l\u1edbp ch\u1ecdn kh\u00f4ng v\u1ea5n \u0111\u1ec1 g\u00ec, h\u1ec7 th\u1ed1ng s\u1ebd ti\u1ebfn h\u00e0nh ghi nh\u1eadn.", "id": "109"}, {"metadata": {"id": "dkhp_doc.pdf:6:1"}, "page_content": "- N\u1ebfu c\u00f3 v\u1ea5n \u0111\u1ec1 l\u1ed7i th\u00ec s\u1ebd th\u00f4ng b\u00e1o l\u1ed7i nh\u01b0 sau....", "id": "110"}, {"metadata": {"id": "dkhp_doc.pdf:6:2"}, "page_content": "H\u00ecnh 5: Hi\u1ec3n th\u1ecb th\u00f4ng b\u00e1o l\u1ed7i khi \u0111\u0103ng k\u00fd l\u1edbp \n \n- N\u1ebfu ghi nh\u1eadn th\u00e0nh c\u00f4ng s\u1ebd th\u00f4ng b\u00e1o nh\u01b0 sau:/...", "id": "111"}, {"metadata": {"id": "dkhp_doc.pdf:6:3"}, "page_content": "v\u00e0 ch\u1edd k\u1ebft qu\u1ea3 x\u1eed l\u00fd...", "id": "112"}, {"metadata": {"id": "dkhp_doc.pdf:6:4"}, "page_content": "H\u00ecnh 6: Hi\u1ec3n th\u1ecb \u0111\u0103ng k\u00fd th\u00e0nh c\u00f4ng v\u00e0 \u0111\u01b0\u1ee3c h\u1ec7 th\u1ed1ng ghi nh\u1eadn \n", "id": "113"}, {"metadata": {"id": "dkhp_doc.pdf:7:0"}, "page_content": "o B\u01b0\u1edbc 6: Ki\u1ec3m tra k\u1ebft qu\u1ea3 \u0111\u0103ng k\u00fd h\u1ecdc ph\u1ea7n tr\u1ea3 v\u1ec1. H\u00ecnh 7: K\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 khi \u0111\u0103ng k\u00fd h\u1ecdc ph\u1ea7n \no B\u01b0\u1edbc 7: Ho\u00e0n t\u1ea5t \u0111\u0103ng k\u00fd h\u1ecdc ph\u1ea7n: \n \nH\u00ccnh 8: Danh s\u00e1ch c\u00e1c l\u1edbp \u0111\u0103ng k\u00fd th\u00e0nh c\u00f4ng \n \n \n", "id": "114"}, {"metadata": {"id": "dkhp_doc.pdf:8:0"}, "page_content": "4. X\u00f3a \u0111\u0103ng k\u00fd h\u1ecdc ph\u1ea7n \nC\u00e1c b\u01b0\u1edbc xo\u00e1 c\u00e1c l\u1edbp \u0111\u00e3 \u0111\u0103ng k\u00fd h\u1ecdc ph\u1ea7n:  \no B\u01b0\u1edbc 1: Chuy\u1ec3n sang menu Danh s\u00e1ch L\u1edbp \u0111\u00e3 \u0111\u0103ng k\u00fd.", "id": "115"}, {"metadata": {"id": "dkhp_doc.pdf:8:1"}, "page_content": "H\u00ecnh 1: Giao di\u1ec7n danh s\u00e1ch l\u1edbp \u0111\u00e3 \u0111\u0103ng k\u00fd \no B\u01b0\u1edbc 2: Ch\u1ecdn c\u00e1c l\u1edbp c\u1ea7n xo\u00e1 \u0111\u0103ng k\u00fd.", "id": "116"}, {"metadata": {"id": "dkhp_doc.pdf:8:2"}, "page_content": "H\u00ecnh 2: H\u01b0\u1edbng d\u1eabn ch\u1ecdn m\u00e3 l\u1edbp c\u1ea7n x\u00f3a \n \n \n", "id": "117"}, {"metadata": {"id": "dkhp_doc.pdf:9:0"}, "page_content": "o B\u01b0\u1edbc 3: B\u1ea5m x\u00f3a sau khi xem xong danh s\u00e1ch c\u00e1c l\u1edbp \u0111\u00e3 ch\u1ecdn \u1edf ngay b\u00ean \nd\u01b0\u1edbi. H\u00ecnh 3: H\u01b0\u1edbng d\u1eabn x\u00f3a c\u00e1c l\u1edbp \u0111\u00e3 ch\u1ecdn \no B\u01b0\u1edbc 4 g\u1ed3m 2 b\u01b0\u1edbc nh\u1ecf: \n- N\u1ebfu c\u00e1c l\u1edbp ch\u1ecdn kh\u00f4ng v\u1ea5n \u0111\u1ec1 g\u00ec, h\u1ec7 th\u1ed1ng s\u1ebd ti\u1ebfn h\u00e0nh ghi nh\u1eadn.", "id": "118"}, {"metadata": {"id": "dkhp_doc.pdf:9:1"}, "page_content": "- N\u1ebfu c\u00f3 v\u1ea5n \u0111\u1ec1 l\u1ed7i th\u00ec s\u1ebd th\u00f4ng b\u00e1o l\u1ed7i m\u00e0u \u0111\u1ecf nh\u01b0 sau \n \nH\u00ecnh 4: Hi\u1ec3n th\u1ecb l\u1ed7i khi ch\u1ecdn l\u1edbp \u0111\u1ec3 x\u00f3a \n- N\u1ebfu ghi nh\u1eadn th\u00e0nh c\u00f4ng s\u1ebd th\u00f4ng b\u00e1o m\u00e0u xanh...", "id": "119"}, {"metadata": {"id": "dkhp_doc.pdf:9:2"}, "page_content": "v\u00e0 ch\u1edd k\u1ebft qu\u1ea3 x\u1eed l\u00fd...", "id": "120"}, {"metadata": {"id": "dkhp_doc.pdf:9:3"}, "page_content": "H\u00ecnh 6: Hi\u1ec3n th\u1ecb x\u00f3a th\u00e0nh c\u00f4ng v\u00e0 \u0111\u01b0\u1ee3c h\u1ec7 th\u1ed1ng ghi nh\u1eadn \n \n \n", "id": "121"}, {"metadata": {"id": "dkhp_doc.pdf:10:0"}, "page_content": "o B\u01b0\u1edbc 5: Ki\u1ec3m tra k\u1ebft qu\u1ea3 xo\u00e1 \u0111\u0103ng k\u00fd h\u1ecdc ph\u1ea7n tr\u1ea3 v\u1ec1. H\u00ecnh 7: K\u1ebft qu\u1ea3 tr\u1ea3 v\u1ec1 khi x\u00f3a \u0111\u0103ng k\u00fd h\u1ecdc ph\u1ea7n \n \n", "id": "122"}], "ids": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", "119", "120", "121", "122"], "sources": [{"file_name": "Software System Document.pdf", "created_at": "2024-12-30 18:27:00"}, {"file_name": "dkhp_doc.pdf", "created_at": "2025-01-01 12:20:54"}]}